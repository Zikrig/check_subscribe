# app/handlers/admin.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
import re

from app.config import settings
from app.services.sheets import update_table
from app.services.replics import get_replic
from app.services.db import SessionLocal, Replic
from app.services.counters import get_counter, reset_counter
from app.services.channels import get_all_channels, toggle_channel, update_channel, delete_channel, get_channel

router = Router()

# –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /info
INFO_TEXT = (
    "/start ‚Äî –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    "/info ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    "/table ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É\n"
    "/channels ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
    "/edit_replics ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–ª–∏–∫–∏\n"
    "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–ª–∏–∫
class EditReplic(StatesGroup):
    choosing_replic = State()
    editing_text = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
class ChannelManage(StatesGroup):
    choosing_action = State()
    adding_channel = State()
    editing_name = State()
    editing_link = State()
    confirming_delete = State()

@router.message(F.text == "/table")
async def cmd_table(message: Message):
    if not message.from_user.id in settings.ADMINS:
        return
    await update_table()
    await message.answer("–¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")

@router.message(F.text == "/info")
async def cmd_info(message: Message):
    if not message.from_user.id in settings.ADMINS:
        return
    await message.answer(INFO_TEXT)

@router.message(F.text == "/edit_replics")
async def cmd_edit_replics(message: Message, state: FSMContext):
    if message.from_user.id not in settings.ADMINS:
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="edit_start")],
        [InlineKeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ", callback_data="edit_success")],
        [InlineKeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–ø–∏—Å–∫–µ", callback_data="edit_not_subbed")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="cancel_edit")]
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–ª–∏–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(EditReplic.choosing_replic)

@router.callback_query(StateFilter(EditReplic.choosing_replic))
async def choose_replic(callback: CallbackQuery, state: FSMContext):
    if callback.data == "cancel_edit":
        await state.clear()
        await callback.message.edit_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.message.answer(INFO_TEXT)
        await callback.answer()
        return
    
    replic_map = {
        "edit_start": "start_message",
        "edit_success": "success_message", 
        "edit_not_subbed": "not_subbed_message"
    }
    
    replic_name = replic_map.get(callback.data)
    if replic_name:
        current_text = await get_replic(replic_name)
        await state.update_data(replic_name=replic_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit")]
        ])
        
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {current_text}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
            reply_markup=cancel_keyboard
        )
        await state.set_state(EditReplic.editing_text)
    await callback.answer()

@router.callback_query(StateFilter(EditReplic.editing_text), F.data == "cancel_edit")
async def cancel_edit(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.message.answer(INFO_TEXT)
    await callback.answer()

@router.message(StateFilter(EditReplic.editing_text))
async def save_new_replic(message: Message, state: FSMContext):
    data = await state.get_data()
    replic_name = data["replic_name"]
    new_text = message.text

    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
        result = await session.execute(
            select(Replic).where(Replic.name == replic_name)
        )
        replic = result.scalar_one_or_none()
        
        if replic:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            replic.text = new_text
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            session.add(Replic(name=replic_name, text=new_text))
        
        await session.commit()

    await message.answer("–†–µ–ø–ª–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()
    await message.answer(INFO_TEXT)
    
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
@router.message(F.text == "/channels")
async def manage_channels(message: Message):
    if message.from_user.id not in settings.ADMINS:
        return
    
    channels = await get_all_channels()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for channel in channels:
        status = "‚úÖ" if channel.is_active else "‚ùå"
        display_name = channel.name or channel.username
        
        button = InlineKeyboardButton(
            text=f"{status} {display_name}",
            callback_data=f"channel_{channel.id}"
        )
        keyboard.inline_keyboard.append([button])
    add_button = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")
    keyboard.inline_keyboard.append([add_button])
    back_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_channels")
    keyboard.inline_keyboard.append([back_button])
    
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("toggle_"))
async def channel_toggle_handler(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[1])
    success = await toggle_channel(channel_id)
    
    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        channel = await get_channel(channel_id)
        status_btn_text = "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if channel.is_active else "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=status_btn_text, callback_data=f"toggle_{channel_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{channel_id}")],
            [InlineKeyboardButton(text="üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"edit_link_{channel_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"delete_{channel_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_channels")]
        ])
        
        await callback.message.edit_text(
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º:\n\n"
            f"ID: {channel.id}\n"
            f"Username: {channel.username}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {channel.name or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
            f"–°—Å—ã–ª–∫–∞: {channel.link or '–ù–µ –∑–∞–¥–∞–Ω–∞'}\n"
            f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if channel.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}",
            reply_markup=keyboard
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("edit_name_"))
async def channel_edit_name_handler(callback: CallbackQuery, state: FSMContext):
    channel_id = int(callback.data.split("_")[2])
    await state.update_data(channel_id=channel_id)
    await state.set_state(ChannelManage.editing_name)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"channel_{channel_id}")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_link_"))
async def channel_edit_link_handler(callback: CallbackQuery, state: FSMContext):
    channel_id = int(callback.data.split("_")[2])
    await state.update_data(channel_id=channel_id)
    await state.set_state(ChannelManage.editing_link)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞ (–¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https:// –∏–ª–∏ http://):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"channel_{channel_id}")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("delete_"))
async def channel_delete_handler(callback: CallbackQuery, state: FSMContext):
    channel_id = int(callback.data.split("_")[1])
    await state.update_data(channel_id=channel_id)
    await state.set_state(ChannelManage.confirming_delete)
    
    channel = await get_channel(channel_id)
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {channel.name or channel.username}?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_{channel_id}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"channel_{channel_id}")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_"))
async def channel_confirm_delete_handler(callback: CallbackQuery, state: FSMContext):
    channel_id = int(callback.data.split("_")[2])
    
    success = await delete_channel(channel_id)
    if success:
        await callback.message.edit_text("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        await manage_channels(callback.message)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
    
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "channel_back")
async def channel_back_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞–º–∏"""
    await state.clear()
    await manage_channels(callback.message)
    await callback.answer()

@router.callback_query(F.data == "cancel_channels")
async def cancel_channels_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    await state.clear()
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    await callback.message.answer(INFO_TEXT)
    await callback.answer()


@router.callback_query(StateFilter(ChannelManage.editing_name), F.data.startswith("channel_"))
async def cancel_edit_name(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await state.clear()
    channel_id = int(callback.data.split("_")[1])
    await channel_action_handler(callback, state)
    await callback.answer()

@router.callback_query(StateFilter(ChannelManage.editing_link), F.data.startswith("channel_"))
async def cancel_edit_link(callback: CallbackQuery, state: FSMContext):
    
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    await state.clear()
    channel_id = int(callback.data.split("_")[1])
    await channel_action_handler(callback, state)
    await callback.answer()
    
    
@router.callback_query(F.data.startswith("channel_"))
async def channel_action_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data == "channel_back":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        await manage_channels(callback.message)
        await callback.answer()
        return
        
    parts = callback.data.split("_")
    channel_id = int(parts[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel = await get_channel(channel_id)
    if not channel:
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await state.update_data(channel_id=channel_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º
    status_btn_text = "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if channel.is_active else "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=status_btn_text, callback_data=f"toggle_{channel_id}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{channel_id}")],
        [InlineKeyboardButton(text="üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"edit_link_{channel_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"delete_{channel_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_channels")]
    ])
    
    await callback.message.edit_text(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º:\n\n"
        f"ID: {channel.id}\n"
        f"Username: {channel.username}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {channel.name or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
        f"–°—Å—ã–ª–∫–∞: {channel.link or '–ù–µ –∑–∞–¥–∞–Ω–∞'}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if channel.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}",
        reply_markup=keyboard
    )
    await callback.answer()


@router.message(StateFilter(ChannelManage.editing_name))
async def process_edit_name(message: Message, state: FSMContext):
    data = await state.get_data()
    channel_id = data.get("channel_id")
    new_name = message.text

    success = await update_channel(channel_id, name=new_name)
    if success:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞.")

    await state.clear()
    await manage_channels(message)

@router.message(StateFilter(ChannelManage.editing_link))
async def process_edit_link(message: Message, state: FSMContext):
    data = await state.get_data()
    channel_id = data.get("channel_id")
    new_link = message.text

    try:
        success = await update_channel(channel_id, link=new_link)
        if success:
            await message.answer("–°—Å—ã–ª–∫–∞ –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–∞.")
    except ValueError as e:
        await message.answer(str(e))

    await state.clear()
    await manage_channels(message)


# Update the cancel handlers to properly clear state
@router.callback_query(StateFilter(ChannelManage.editing_name), F.data.startswith("channel_"))
async def cancel_edit_name(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await state.clear()
    channel_id = int(callback.data.split("_")[1])
    await channel_action_handler(callback, state)

@router.callback_query(StateFilter(ChannelManage.editing_link), F.data.startswith("channel_"))
async def cancel_edit_link(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    await state.clear()
    channel_id = int(callback.data.split("_")[1])
    await channel_action_handler(callback, state)
    
@router.message(F.text == "/stats")
async def cmd_stats(message: Message):
    if message.from_user.id not in settings.ADMINS:
        return
    
    count = await get_counter()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω—É–ª–∏—Ç—å —Å—á–µ—Ç—á–∏–∫", callback_data="reset_counter")]
    ])
    
    await message.answer(f"–í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {count}", reply_markup=keyboard)

@router.callback_query(F.data == "reset_counter")
async def reset_counter_handler(callback: CallbackQuery):
    if callback.from_user.id not in settings.ADMINS:
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_reset")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_reset")]
    ])
    
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å —Å—á–µ—Ç—á–∏–∫?",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "confirm_reset")
async def confirm_reset_handler(callback: CallbackQuery):
    if callback.from_user.id not in settings.ADMINS:
        return
    
    await reset_counter()
    await callback.message.edit_text("–°—á–µ—Ç—á–∏–∫ –æ–±–Ω—É–ª–µ–Ω!")
    await callback.answer()

@router.callback_query(F.data == "cancel_reset")
async def cancel_reset_handler(callback: CallbackQuery):
    await callback.message.edit_text("–û—Ç–º–µ–Ω–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞")
    await callback.answer()
    
    
@router.callback_query(F.data == "add_channel")
async def add_channel_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChannelManage.adding_channel)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>id username [name] [link]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>-10012345678 channel_username –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ https://t.me/channel_username</code>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_channels")]
        ])
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
@router.message(StateFilter(ChannelManage.adding_channel))
async def process_add_channel(message: Message, state: FSMContext):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º id –∏ username.")
            return

        channel_id = int(parts[0])
        username = parts[1]
        name = ' '.join(parts[2:]) if len(parts) > 2 else None
        link = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        for part in parts[2:]:
            if part.startswith(('http://', 'https://', 't.me/')):
                link = part
                # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                if name:
                    name = name.replace(part, '').strip()
                break

        from app.services.channels import add_channel
        success = await add_channel(channel_id, username, name, link)
        
        if success:
            await message.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await message.answer("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
    
    await state.clear()
    await manage_channels(message)